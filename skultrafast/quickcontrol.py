"""
Module to import and work with files generated by QuickControl from phasetech.
"""
from matplotlib.pyplot import axis
import numpy as np
from typing import Dict, List, Iterable
from pathlib import Path
import attr

from skultrafast.dataset import PolTRSpec, TimeResSpec


def parse_str(s: str):
    if s.isnumeric():
        return int(s)
    elif set(s) - set('-.0123456789E') == set():
        # Try is a workaround for the version string
        try:
            return float(s)
        except ValueError:
            return s
    elif set(s) - set('-.0123456789E,') == set():
        return list(map(float, s.split(',')))
    elif s == 'TRUE':
        return True
    elif s == 'FALSE':
        return False
    else:
        return s


@attr.s(auto_attribs=True)
class QCFile:
    fname: str = attr.ib()
    path: Path = attr.ib()
    prefix: str = attr.ib()
    info: dict = attr.ib()

    @path.default
    def _path(self):
        return Path(self.fname).parent

    @prefix.default
    def _prefix(self):
        return Path(self.fname).with_suffix('').name

    @info.default
    def _load_info(self):
        h = []
        d = {}
        with (self.path / self.prefix).with_suffix('.info').open() as i:
            for l in i:
                key, val = l.split('\t')
                val = val[:-1].strip()
                d[key] = parse_str(val)
        return d


@attr.s
class QCTimeRes(QCFile):
    t: Iterable[float] = attr.ib()
    wavelength: np.ndarray = attr.ib()
    par_data: np.ndarray = attr.ib()
    per_data: np.ndarray = attr.ib()

    @t.default
    def _t_default(self):
        t_list = self.info['Delays']
        return np.array(t_list)/1000.

    @par_data.default
    def _load_par(self):
        par_scan_files = self.path.glob(self.prefix + '*_PAR*.scan')
        return np.array([np.loadtxt(p)[:-1, 1:] for p in par_scan_files])

    @per_data.default
    def _load_per(self):
        per_scan_files = self.path.glob(self.prefix + '*_PER*.scan')
        return np.array([np.loadtxt(p)[:-1, 1:] for p in per_scan_files])

    @wavelength.default
    def calc_wl(self):
        grating = self.info['MONO1 Grating']
        disp_per_grating = {'30': 7.7, '75': 7.7 *  30/75.}
        disp = disp_per_grating[grating.split()[2]]
        return (np.arange(128) - 64) * disp + self.info['MONO1 Wavelength']

    def make_pol_ds(self, sigma=None) -> PolTRSpec:
        para = np.nanmean(self.par_data, axis=0)
        ds_para = TimeResSpec(self.wavelength, self.t, 1000*para, disp_freq_unit='cm')
        perp = np.nanmean(self.per_data, axis=0)
        ds_perp = TimeResSpec(self.wavelength, self.t, 1000*perp, disp_freq_unit='cm' )
        return PolTRSpec(ds_para, ds_perp)
